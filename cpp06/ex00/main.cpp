#include "Convert.hpp"

#include <iostream>

void print_all_type(const char* s, int dbgflg) {
  if (dbgflg)
    std::cout << "./convert " << s << std::endl;
  Convert c(s);
  c.printChar();
  c.printInt();
  c.printFloat();
  c.printDouble();
  if (dbgflg)
    std::cout << std::endl;
}

int main(int argc, const char** argv) {
  if (argc != 2) {
    std::cout << "Usage: ./convert <converting value>" << std::endl;
    std::cout << std::endl;
    std::cout << "Ex)" << std::endl;
    //subject
    print_all_type("0", 1);
    print_all_type("nan", 1);
    print_all_type("42.0f", 1);
    //char
    print_all_type("31", 1);
    print_all_type("32", 1);
    print_all_type("126", 1);
    print_all_type("127", 1);
    print_all_type("a", 1);
    print_all_type("Z", 1);
    print_all_type("9", 1);
    print_all_type("!", 1);
    //int
    print_all_type("-1", 1);
    print_all_type("+1", 1);
    print_all_type("+-+---+42", 1);
    //int limit
    print_all_type("-2147483649", 1);
    print_all_type("-2147483648", 1);
    print_all_type("2147483647", 1);
    print_all_type("2147483648", 1);
    //float/double
    print_all_type("0.0", 1);
    print_all_type("+12.34", 1);
    print_all_type("-12.34", 1);
    print_all_type("3.141592653589793238462643383279502884197169399375105820974944", 1);
    print_all_type("0.000000000000000000000000000000000000000000000000000000000001", 1);
    //float limit
    print_all_type("340282346638528859811704183484516925440", 1);
    print_all_type("3402823466385288598117041834845169254400", 1);
    print_all_type("-340282346638528859811704183484516925440", 1);
    print_all_type("-3402823466385288598117041834845169254400", 1);
    //double limit
    print_all_type("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368", 1);
    print_all_type("1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583680", 1);
    print_all_type("-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368", 1);
    print_all_type("-1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583680", 1);
    //scientific
    print_all_type("-inff", 1);
    print_all_type("+inff", 1);
    print_all_type("nanf", 1);
    print_all_type("-inf", 1);
    print_all_type("+inf", 1);
    print_all_type("nan", 1);
    //broken
    print_all_type("", 1);
    print_all_type("abcdefghijklmn", 1);
    print_all_type("3.1415k", 1);
    print_all_type("3.14.15", 1);
    print_all_type("- 4.2", 1);
    return 0;
  }
  print_all_type(argv[1], 0);
  return 0;
}
